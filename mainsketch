#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Define pins for traffic signal modules
int redPins[] = {2, 6, 9, A0};      // Red LEDs for each module
int greenPins[] = {4, 8, 11, A2};   // Green LEDs for each module

// Define the duration for the green light (10 seconds)
unsigned long greenLightDuration = 10000; // 10,000 milliseconds = 10 seconds

// Variable to track which module should have its green light on
int currentModule = 0;

// Variable to track the last time the green light changed
unsigned long lastChangeTime = 0;

// RFID reader setup
#define SS_PIN 53  // Change SS_PIN to 53 (instead of 10)
#define RST_PIN 49
MFRC522 mfrc522(SS_PIN, RST_PIN); // Create MFRC522 instance

// I2C LCD setup
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Address 0x27, 16 columns and 2 rows

// States for the system
enum SystemState { GREEN_ROTATION, FIRST_MODULE_GREEN, EMERGENCY_MODE };
SystemState systemState = GREEN_ROTATION;

bool firstScanDone = false;

void setup() {
  // Initialize serial communication
  Serial.begin(9600);
  
  // Initialize RFID reader
  SPI.begin();
  mfrc522.PCD_Init();

  // Initialize the LCD
  lcd.begin(16, 2);  // Initialize with the LCD's dimensions
  lcd.clear();
  
  // Ensure the backlight is on
  lcd.backlight();   // Turn on the LCD backlight
  
  // Set all pins as OUTPUT
  for (int i = 0; i < 4; i++) {
    pinMode(redPins[i], OUTPUT);
    pinMode(greenPins[i], OUTPUT);
  }

  // Initialize all LEDs to off state (red on, green off)
  for (int i = 0; i < 4; i++) {
    digitalWrite(redPins[i], HIGH);   // Turn on red light initially
    digitalWrite(greenPins[i], LOW);  // Ensure green light is off initially
  }

  // Set the initial state (green signal rotation)
  lastChangeTime = millis(); // Initialize the start time for the first green light

  // Show initial message on the LCD
  lcd.setCursor(0, 0);
  lcd.print("EmergencyTraffic");
  lcd.setCursor(0, 1);
  lcd.print("Control System");
}

void loop() {
  // Check if an RFID tag has been scanned
  if (mfrc522.PICC_IsNewCardPresent()) {
    if (mfrc522.PICC_ReadCardSerial()) {
      String tagUID = "";
      for (byte i = 0; i < mfrc522.uid.size; i++) {
        tagUID += String(mfrc522.uid.uidByte[i], HEX);
      }
      Serial.println("Tag UID: " + tagUID);
      
      // Handle the scan event based on whether it's the first or second scan
      if (!firstScanDone) {
        // First scan: display Ambulance message
        firstScanDone = true;
        
        // Switch to Emergency Mode
        systemState = EMERGENCY_MODE;
        
        // Set emergency signal (green for first module)
        digitalWrite(greenPins[0], HIGH);
        digitalWrite(redPins[0], LOW);
        for (int i = 1; i < 4; i++) {
          digitalWrite(greenPins[i], LOW);
          digitalWrite(redPins[i], HIGH);
        }

        // Show Ambulance message on LCD
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Ambulance Nearby");
        lcd.setCursor(0, 1);
        lcd.print("PleaseCo-operate");
        
      } else {
        // Second scan: Reset system and display control system message
        firstScanDone = false;
        
        // Reset the system state to GREEN_ROTATION
        systemState = GREEN_ROTATION;
        lastChangeTime = millis(); // Reset the timer for green light rotation
        
        // Ensure the first module's green light is turned off before starting rotation again
        digitalWrite(greenPins[0], LOW);
        digitalWrite(redPins[0], HIGH);
        
        // Move to the second module for rotation start
        currentModule = 1; // Start rotation from the second module
        
        // Turn on the green light for the second module
        digitalWrite(greenPins[currentModule], HIGH);
        digitalWrite(redPins[currentModule], LOW);

        // Show Emergency Traffic Control message on LCD
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Emergency Traffic");
        lcd.setCursor(0, 1);
        lcd.print("Control System");
      }

      // Wait for the card to be removed
      mfrc522.PICC_HaltA();
      mfrc522.PCD_StopCrypto1();
    }
  }

  // If the system is in rotation mode, manage the green signal cycle
  if (systemState == GREEN_ROTATION) {
    unsigned long currentTime = millis();
    
    // Check if it's time to change the green light (after 10 seconds)
    if (currentTime - lastChangeTime >= greenLightDuration) {
      
      // Turn off the green light for the current module and turn on the red light
      digitalWrite(greenPins[currentModule], LOW);  
      digitalWrite(redPins[currentModule], HIGH);  

      // Move to the next module (cyclically)
      currentModule = (currentModule + 1) % 4;

      // Turn on the green light for the next module and turn off its red light
      digitalWrite(greenPins[currentModule], HIGH);  
      digitalWrite(redPins[currentModule], LOW);  

      // Update the last change time to the current time
      lastChangeTime = currentTime;
    }
  }
}

